import datetime

from aiogram import Router, F
from aiogram.filters import CommandStart
from aiogram.types import Message, CallbackQuery, LabeledPrice

from infrastructure.database.db_working import UserWorking
from infrastructure.parsers.all_matches_parsers import parser_all_matches_flashscore
from tgbot.keyboards.inline import Profile_kb, Games_choose, start_game_and_play
from tgbot.keyboards.reply import main_user_profile, webappstart

user_router = Router()


@user_router.message(CommandStart())
async def user_start(message: Message):
    await UserWorking.add_user(message.from_user.id, message.from_user.username)
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç—Å–≤—É—é –≤–∞—Å {message.from_user.username}", reply_markup=main_user_profile())


class ProfileH:
    @staticmethod
    @user_router.message(F.text == 'üè°–ü—Ä–æ—Ñ–∏–ª—å')
    async def user_main_profile(message: Message):
        user = await UserWorking.get_user(message.from_user.id)
        text = f"""     üë§ *–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å* `{user.name}`\n
        *–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä:* `{user.user_id}`\n

        üìä –í–∞—à–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:

        """

        if user.subscribe:
            text += f"*–ü–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏:* {user.last_day_subs}"
        else:
            text += '*–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞:* `–ù–µ—Ç—É –ø–æ–¥–ø–∏—Å–∫–∏`'
        await message.answer(text=text, parse_mode='Markdown', reply_markup=Profile_kb.profiles_choose_some())

    @staticmethod
    @user_router.message(F.text == 'üì£–í—ã–±—Ä–∞—Ç—å –º–∞—Ç—á–∏')
    async def user_main_profile(message: Message):

        user = await UserWorking.get_user(message.from_user.id)
        text = ''' –í—ã–±–µ—Ä–µ—Ç–µ —Å–ø–æ—Ä—Ç –ø—Ä–æ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å'''
        await message.answer(text=text, parse_mode='Markdown', reply_markup=Games_choose.choose_sport())

    @staticmethod
    @user_router.callback_query(F.data == 'get_subscribe')
    async def back_in_main_profile(call: CallbackQuery):
        await call.answer()
        user = await UserWorking.get_user(call.from_user.id)

        await call.message.edit_text(text='üí∏*–í—ã–±–µ—Ä–µ—Ç–µ —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω:*', parse_mode='Markdown',
                                     reply_markup=Profile_kb.subscribes())

    @staticmethod
    @user_router.callback_query(F.data == 'back_in_profile')
    async def back_in_main_profile(call: CallbackQuery):
        await call.answer()
        user = await UserWorking.get_user(call.from_user.id)
        text = f"""     üë§ *–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å* `{user.name}`\n
               *–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä:* `{user.user_id}`\n

               üìä –í–∞—à–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:

               """
        if user.subscribe:
            text += f"*–ü–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏:* {user.last_day_subs}"
        else:
            text += '*–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞:* `–ù–µ—Ç—É –ø–æ–¥–ø–∏—Å–∫–∏`'
        await call.message.edit_text(text=text, parse_mode='Markdown', reply_markup=Profile_kb.profiles_choose_some())


class Subscribes:

    @staticmethod
    @user_router.callback_query(F.data.contains('sube_'))
    async def back_in_main_profile(call: CallbackQuery):
        await call.answer()
        data = call.data.split('_')[1]

        nums = 0
        month = 0

        if int(data) == 6:
            nums = 500
            month = 180
            p = LabeledPrice(label='–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 6 –º–µ—Å—è—Ü–µ–≤', amount=50000)
        elif int(data) == 12:
            nums = 900
            month = 365
            p = LabeledPrice(label='–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 12 –º–µ—Å—è—Ü–µ–≤', amount=90000)
        elif int(data) == 1:
            nums = 100
            month = 30
            p = LabeledPrice(label='–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 1 –º–µ—Å—è—Ü', amount=10000)
        text = f'''*–¢–∞—Ä–∏—Ñ:* –Ω–∞ {month} –¥–Ω–µ–π
*–°—Ç–æ–∏–º–æ—Å—Ç—å:* {nums} üá∑üá∫RUB
*–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è:* {month} –¥–Ω–µ–π

*–í—ã –ø–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ —Ä–µ—Å—É—Ä—Å–∞–º –¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞:*

        '''
        user = await UserWorking.get_user(call.from_user.id)
        if user.subscribe:
            await call.message.answer(text="–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∞")
        else:
            await UserWorking.set_sub(call.from_user.id, month)
            await call.message.answer(text=text, parse_mode='Markdown')
            await call.bot.send_invoice(
                call.message.chat.id,
                title='–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –±–æ—Ç–∞',
                description="–ü–æ–¥–ø–∏—Å–∫–∞",
                provider_token='381764678:TEST:88850',
                currency='rub',

                is_flexible=False,  # True –µ—Å–ª–∏ –∫–æ–Ω–µ—á–Ω–∞—è —Ü–µ–Ω–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–ø–æ—Å–æ–±–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
                prices=[p],
                start_parameter='bot_',
                payload='some-invoice-payload-for-our-internal-use'
            )


class Games:

    @staticmethod
    @user_router.callback_query(F.data == 'sport_fut')
    async def back_in_main_profile(call: CallbackQuery):
        await call.answer()
        user = await UserWorking.get_user(call.from_user.id)
        arr = parser_all_matches_flashscore('f_1_0_7_ru-kz_1', 'fo_1_0_7_ru-kz_1_0')
        array = ''
        ch = 0
        array_of_games = ''
        # –ø–µ—Ä–µ–¥–µ–ª–∫–∞ –º–∞—Å—Å–∏–≤–∞ —á—Ç–æ–±—ã –ø—Ä–æ—â–µ –±—ã–ª–æ –≤ js —Ç–∞–∫–∂–µ –∑–≤–µ–∑–¥–æ—á–∫–∞ –≤ –Ω–∞—á–∞–ª–µ —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –ª–∏—à–Ω–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞

        for i in arr.split('*'):
            array += i + '*'
            ch += 1
            if ch == 30:
                array_of_games = array

        await call.message.answer(text='–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–∞—Ç—á–∏ –ø–æ —Ñ—É—Ç–±–æ–ª—É –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É',
                                  parse_mode='Markdown',
                                  reply_markup=start_game_and_play(str(array_of_games)))

    @staticmethod
    @user_router.callback_query(F.data == 'sport_bask')
    async def back_in_main_profile(call: CallbackQuery):
        await call.answer()
        user = await UserWorking.get_user(call.from_user.id)
        arr = parser_all_matches_flashscore('f_3_0_7_ru-kz_1', 'fo_3_0_7_ru-kz_1_0')
        array = ''
        ch = 0
        array_of_games = ''
        # –ø–µ—Ä–µ–¥–µ–ª–∫–∞ –º–∞—Å—Å–∏–≤–∞ —á—Ç–æ–±—ã –ø—Ä–æ—â–µ –±—ã–ª–æ –≤ js —Ç–∞–∫–∂–µ –∑–≤–µ–∑–¥–æ—á–∫–∞ –≤ –Ω–∞—á–∞–ª–µ —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –ª–∏—à–Ω–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞

        for i in arr.split('*'):
            array += i + '*'
            ch += 1
            if ch == 30:
                array_of_games = array

        await call.message.answer(text='–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–∞—Ç—á–∏ –ø–æ –±–∞—Å–∫–µ—Ç–±–æ–ª—É –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É',
                                  parse_mode='Markdown',
                                  reply_markup=start_game_and_play(str(array_of_games)))

    @staticmethod
    @user_router.callback_query(F.data == 'sport_vol')
    async def back_in_main_profile(call: CallbackQuery):
        user = await UserWorking.get_user(call.from_user.id)
        arr = parser_all_matches_flashscore('f_12_0_7_ru-kz_1', 'fo_12_0_7_ru-kz_1_0')
        array = ''
        ch = 0
        array_of_games = ''
        # –ø–µ—Ä–µ–¥–µ–ª–∫–∞ –º–∞—Å—Å–∏–≤–∞ —á—Ç–æ–±—ã –ø—Ä–æ—â–µ –±—ã–ª–æ –≤ js —Ç–∞–∫–∂–µ –∑–≤–µ–∑–¥–æ—á–∫–∞ –≤ –Ω–∞—á–∞–ª–µ —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –ª–∏—à–Ω–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞

        for i in arr.split('*'):
            array += i + '*'
            ch += 1
            if ch == 30:
                array_of_games = array
        await call.message.answer(text='–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–∞—Ç—á–∏ –ø–æ –≤–æ–ª–µ–π–±–æ–ª—É –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É',
                                  parse_mode='Markdown',
                                  reply_markup=start_game_and_play(str(array_of_games)))


async def check_subs(bot):
    users = await UserWorking.get_all_users_with_subs()
    for user in users:
        print('–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ª—é–¥–µ–π')
        print(user.last_day_subs)
        print(datetime.datetime.today())
        if user.last_day_subs <= datetime.datetime.today().date():
            await UserWorking.set_subscribe_false(user.user_id)
            await bot.send_message(text="–£ –≤–∞—Å –∫–æ–Ω—á–∏–ª–∞—Å—å –ø–æ–¥–ø–∏—Å–∫–∞‚ùó‚ùó‚ùó\nüí∏–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–π —Ç–∞—Ä–∏—Ñ:",
                                   reply_markup=main_user_profile(), chat_id=user.user_id)
